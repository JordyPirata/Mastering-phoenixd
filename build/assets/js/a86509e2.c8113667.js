"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[883],{4537:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Flags","title":"Useful phoenixd Flags","description":"Here are some useful command-line flags you can add to the ExecStart line in your phoenixd.service file:","source":"@site/docs/2-Flags.md","sourceDirName":".","slug":"/Flags","permalink":"/Mastering-phoenixd/Flags","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"slug":"/Flags"},"sidebar":"tutorialSidebar","previous":{"title":"Install phoenixd","permalink":"/Mastering-phoenixd/Install"},"next":{"title":"Uninstall phoenixd","permalink":"/Mastering-phoenixd/Uninstall"}}');var n=t(4848),o=t(8453);const l={slug:"/Flags"},d="Useful phoenixd Flags",r={},a=[{value:"Liquidity Options:",id:"liquidity-options",level:3},{value:"HTTP Options:",id:"http-options",level:3},{value:"Seed Options:",id:"seed-options",level:3},{value:"Logging Options:",id:"logging-options",level:3}];function c(e){const s={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"useful-phoenixd-flags",children:"Useful phoenixd Flags"})}),"\n",(0,n.jsxs)(s.p,{children:["Here are some useful command-line flags you can add to the ",(0,n.jsx)(s.code,{children:"ExecStart"})," line in your phoenixd.service file:"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--agree-to-terms-of-service"}),": (Hidden flag) Agrees to the terms of service, preventing the interactive prompt on first run."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--chain <mainnet|testnet>"}),": Specifies the Bitcoin chain to use. Defaults to mainnet."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--mempool-space-url <URL>"}),": Sets a custom mempool.space instance URL."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--mempool-space-polling-interval-minutes <minutes>"}),": (Hidden flag) Defines how often to poll the mempool.space API (in minutes). Defaults to 10 minutes."]}),"\n",(0,n.jsx)(s.h3,{id:"liquidity-options",children:"Liquidity Options:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--auto-liquidity <off|2m|5m|10m>"}),": Sets the amount automatically requested when inbound liquidity is needed. Defaults to 2m (2,000,000 satoshis)."]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"off: 0 satoshis"}),"\n",(0,n.jsx)(s.li,{children:"2m: 2,000,000 satoshis"}),"\n",(0,n.jsx)(s.li,{children:"5m: 5,000,000 satoshis"}),"\n",(0,n.jsx)(s.li,{children:"10m: 10,000,000 satoshis"}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--max-mining-fee <satoshis>"}),": Sets the maximum mining fee for on-chain operations in satoshis. Restricted to 5,000 to 200,000 satoshis. Defaults to 1% of the --auto-liquidity amount."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--max-fee-credit <off|50k|100k>"}),": Sets the maximum fee credit. If reached, payments will be rejected. Defaults to 100k (100,000 satoshis)."]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"off: 0 satoshis"}),"\n",(0,n.jsx)(s.li,{children:"50k: 50,000 satoshis"}),"\n",(0,n.jsx)(s.li,{children:"100k: 100,000 satoshis"}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--max-relative-fee-percent <percent>"}),": (Hidden flag) Sets the maximum relative fee for on-chain operations in percent. Restricted to 1 to 50. Defaults to 30."]}),"\n",(0,n.jsx)(s.h3,{id:"http-options",children:"HTTP Options:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--http-bind-ip <IP_address>"}),": Specifies the IP address for the HTTP API to bind to. Defaults to 127.0.0.1."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--http-bind-port <port_number>"}),": Sets the port for the HTTP API. Defaults to 9740."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--http-password <password>"}),": Sets the password for full access to the HTTP API. If not provided, a default password will be generated."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--http-password-limited-access <password>"}),": Sets the password for limited access to the HTTP API. If not provided, a default password will be generated."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--webhook <URL>"}),": Specifies a webhook HTTP endpoint for push notifications. Can be used multiple times for multiple webhooks."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--webhook-secret <secret>"}),": Sets the secret used to authenticate webhook calls. If not provided, a default secret will be generated."]}),"\n",(0,n.jsx)(s.h3,{id:"seed-options",children:"Seed Options:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--seed <12-word_mnemonic>"}),": Explicitly provides a 12-word mnemonic seed. Use with extreme caution as this will expose your seed in plain text."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--seed-path <path_to_seed_file>"}),": Overrides the default path to the seed file (defaults to datadir/seed.dat)."]}),"\n",(0,n.jsx)(s.h3,{id:"logging-options",children:"Logging Options:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--log-rotate-size <MB>"}),": Sets the log file rotation size in megabytes. Defaults to 10 MB."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--log-rotate-max-files <number>"}),": Sets the maximum number of log files to keep. Defaults to 5."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--silent"}),": Sets the verbosity level to silent (no console output)."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"--verbose"}),": Sets the verbosity level to verbose (detailed console output)."]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>d});var i=t(6540);const n={},o=i.createContext(n);function l(e){const s=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),i.createElement(o.Provider,{value:s},e.children)}}}]);